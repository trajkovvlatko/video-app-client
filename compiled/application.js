// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Video = {
    initialize: function() {
      console.log("Video app initialized");
      window.video_router = new Video.VideoRouter();
      window.Video.root_path = "http://192.168.0.102:8080/restapi/api/";
      return Backbone.history.start();
    }
  };

  Video.Utils = {
    render_main_menu: function() {
      this.main_menu = new Video.MainMenu();
      return $(".main-menu-container").html(this.main_menu.render().el);
    },
    validate_email: function(email) {
      var pattern;
      pattern = new RegExp(/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i);
      return pattern.test(email);
    },
    render_featured_videos: function() {
      var videos;
      $(".featured-container").html("");
      videos = new Video.Videos();
      videos.url = window.Video.root_path + "videos/featured";
      return videos.fetch({
        success: function() {
          return videos.each(function(video) {
            this.featured_video = new Video.FeaturedVideo({
              video: video
            });
            return $(".featured-container").append(this.featured_video.render().el);
          });
        }
      });
    },
    render_defaults: function() {
      this.render_main_menu();
      this.render_featured_videos();
      this.main_video = new Video.MainVideo();
      this.set_before_ajax();
      return $(".video-container").html(this.main_video.render().el);
    },
    handle_unauthorized: function() {
      localStorage.removeItem('email');
      localStorage.removeItem('name');
      localStorage.removeItem('token');
      localStorage.removeItem('user_type');
      this.render_main_menu();
      return alert("Please login");
    },
    set_before_ajax: function() {
      if (localStorage.token) {
        return $.ajaxSetup({
          beforeSend: function(xhr) {
            return xhr.setRequestHeader("token", localStorage.token);
          }
        });
      }
    }
  };

  Video.VideoRouter = (function(_super) {

    __extends(VideoRouter, _super);

    function VideoRouter() {
      return VideoRouter.__super__.constructor.apply(this, arguments);
    }

    VideoRouter.prototype.routes = {
      "": "index",
      "home": "index",
      "videos": "my_videos",
      "admin_videos": "admin_videos",
      "upload": "index",
      "videos/view/:id": "view"
    };

    VideoRouter.prototype.initialize = function() {
      _.extend(Video.VideoRouter.prototype, Video.Utils);
      return console.log("Video router initialized");
    };

    VideoRouter.prototype.index = function() {
      return this.render_defaults();
    };

    VideoRouter.prototype.my_videos = function() {
      var action;
      console.log("my videos");
      action = "my_videos";
      return this.render_index_videos(action);
    };

    VideoRouter.prototype.admin_videos = function() {
      var action;
      action = "admin_videos";
      return this.render_index_videos(action);
    };

    VideoRouter.prototype.render_index_videos = function(action) {
      var self,
        _this = this;
      self = this;
      console.log("render_index_videos");
      this.set_before_ajax();
      this.render_main_menu();
      this.render_featured_videos();
      this.videos = new Video.Videos();
      this.videos.url = window.Video.root_path + ("videos/" + action);
      return this.videos.fetch({
        success: function() {
          console.log(action);
          if (action === "admin_videos") {
            _this.my_videos_view = new Video.AdminVideos({
              collection: _this.videos
            });
          } else {
            _this.my_videos_view = new Video.MyVideos({
              collection: _this.videos
            });
          }
          return $(".video-container").html(_this.my_videos_view.render().el);
        },
        error: function(collection, response, options) {
          if (response.status === 401) {
            return self.handle_unauthorized();
          }
        }
      });
    };

    VideoRouter.prototype.view = function(id) {
      var videos;
      this.set_before_ajax();
      this.render_main_menu();
      this.render_featured_videos();
      videos = new Video.Videos();
      videos.url = window.Video.root_path + "videos/view/" + id;
      return videos.fetch({
        success: function() {
          this.main_video = new Video.MainVideo({
            videos: videos
          });
          return $(".video-container").html(this.main_video.render().el);
        }
      });
    };

    return VideoRouter;

  })(Backbone.Router);

  Video.UserModel = (function(_super) {

    __extends(UserModel, _super);

    function UserModel() {
      return UserModel.__super__.constructor.apply(this, arguments);
    }

    UserModel.prototype.urlRoot = window.Video.root_path + "users/";

    UserModel.prototype.initialize = function(options) {
      return this.options = options;
    };

    return UserModel;

  })(Backbone.Model);

  Video.VideoModel = (function(_super) {

    __extends(VideoModel, _super);

    function VideoModel() {
      return VideoModel.__super__.constructor.apply(this, arguments);
    }

    VideoModel.prototype.urlRoot = window.Video.root_path + "videos/";

    VideoModel.prototype.initialize = function(options) {
      return this.options = options;
    };

    return VideoModel;

  })(Backbone.Model);

  Video.Users = (function(_super) {

    __extends(Users, _super);

    function Users() {
      return Users.__super__.constructor.apply(this, arguments);
    }

    Users.prototype.model = Video.UserModel;

    Users.prototype.url = window.Video.root_path + "users";

    return Users;

  })(Backbone.Collection);

  Video.Videos = (function(_super) {

    __extends(Videos, _super);

    function Videos() {
      return Videos.__super__.constructor.apply(this, arguments);
    }

    Videos.prototype.model = Video.VideoModel;

    Videos.prototype.url = window.Video.root_path + "videos/index";

    return Videos;

  })(Backbone.Collection);

  Video.AdminVideo = (function(_super) {

    __extends(AdminVideo, _super);

    function AdminVideo() {
      return AdminVideo.__super__.constructor.apply(this, arguments);
    }

    AdminVideo.prototype.template = "#admin_video_tpl";

    AdminVideo.prototype.className = "my-video";

    AdminVideo.prototype.events = {
      "click .js-delete": "delete",
      "click .js-featured": "featured"
    };

    AdminVideo.prototype.initialize = function() {
      _.extend(Video.AdminVideo.prototype, Video.Utils);
      return _.bindAll(this, "render");
    };

    AdminVideo.prototype.render = function() {
      var container, template;
      if (localStorage.user_type === "admin") {
        container = $(this.el);
        this.video = this.options.video;
        this.id = this.video.id;
        template = _.template($(this.template).html(), {
          video: this.video
        });
        container.html(template);
        return this;
      }
    };

    AdminVideo.prototype["delete"] = function(e) {
      var self;
      console.log("delete");
      self = this;
      if (confirm("Are you sure you want to delete this video?") === true) {
        return $.ajax(window.Video.root_path + ("videos/" + this.id), {
          method: "DELETE",
          success: function() {
            $(self.el).remove();
            return console.log("deleted");
          },
          error: function(jqXHR, textStatus, errorThrow) {
            if (jqXHR.status === 401) {
              return self.handle_unauthorized();
            }
          }
        });
      }
    };

    AdminVideo.prototype.featured = function(e) {
      var self, update_video;
      console.log("featured");
      self = this;
      update_video = new Video.VideoModel();
      update_video.url = "" + window.Video.root_path + "videos/" + this.id;
      if ($(e.target).prop("checked")) {
        update_video.set({
          id: this.id,
          featured: "1"
        });
      } else {
        update_video.set({
          id: this.id,
          featured: "0"
        });
      }
      return update_video.save(null, {
        success: function() {
          self.render_featured_videos();
          return console.log("success featured");
        },
        error: function(jqXHR, textStatus, errorThrow) {
          if (jqXHR.status === 401) {
            return self.handle_unauthorized();
          }
        }
      });
    };

    return AdminVideo;

  })(Backbone.View);

  Video.AdminVideos = (function(_super) {

    __extends(AdminVideos, _super);

    function AdminVideos() {
      return AdminVideos.__super__.constructor.apply(this, arguments);
    }

    AdminVideos.prototype.template = "#admin_videos_tpl";

    AdminVideos.prototype.className = "my-videos-list";

    AdminVideos.prototype.initialize = function() {
      return _.bindAll(this, "render");
    };

    AdminVideos.prototype.render = function() {
      var container, template;
      if (localStorage.user_type === "admin") {
        container = $(this.el);
        template = _.template($(this.template).html());
        container.html(template);
        this.collection.each(function(item) {
          var view;
          view = new Video.AdminVideo({
            video: item
          });
          return $(container).append(view.render().el);
        });
        return this;
      }
    };

    return AdminVideos;

  })(Backbone.View);

  Video.FeaturedVideo = (function(_super) {

    __extends(FeaturedVideo, _super);

    function FeaturedVideo() {
      return FeaturedVideo.__super__.constructor.apply(this, arguments);
    }

    FeaturedVideo.prototype.template = "#featured_video_tpl";

    FeaturedVideo.prototype.className = "featured-video";

    FeaturedVideo.prototype.initialize = function() {
      return _.bindAll(this, "render");
    };

    FeaturedVideo.prototype.render = function() {
      var container, template, video;
      container = $(this.el);
      video = this.options.video;
      template = _.template($(this.template).html(), {
        video: video
      });
      container.html(template);
      return this;
    };

    return FeaturedVideo;

  })(Backbone.View);

  Video.LoginForm = (function(_super) {

    __extends(LoginForm, _super);

    function LoginForm() {
      return LoginForm.__super__.constructor.apply(this, arguments);
    }

    LoginForm.prototype.template = "#login_form_tpl";

    LoginForm.prototype.className = "login-form";

    LoginForm.prototype.initialize = function() {
      _.bindAll(this, "render");
      return _.extend(Video.LoginForm.prototype, Video.Utils);
    };

    LoginForm.prototype.events = {
      "click .js-login-submit": "login",
      "click .js-login-cancel": "cancel",
      "keypress .js-login-password": "enter_password_login"
    };

    LoginForm.prototype.render = function() {
      var container, template;
      container = $(this.el);
      template = _.template($(this.template).html());
      container.html(template);
      return this;
    };

    LoginForm.prototype.enter_password_login = function(e) {
      console.log("enter_password_login");
      if (e.charCode === 13) {
        return this.login(e);
      }
    };

    LoginForm.prototype.login = function(e) {
      var email, password, self, user;
      self = this;
      email = $(this.el).find(".js-login-email").val();
      password = $(this.el).find(".js-login-password").val();
      if (email !== "" && password !== "") {
        if (self.validate_email(email)) {
          user = new Video.UserModel();
          user.url = window.Video.root_path + "users/login";
          return user.fetch({
            crossDomain: true,
            data: {
              email: email,
              password: password
            },
            type: 'POST',
            contentType: "application/x-www-form-urlencoded",
            success: function() {
              if (user.get(0)) {
                localStorage.user_type = user.get(0).user_type;
                localStorage.email = user.get(0).email;
                localStorage.name = user.get(0).name;
                localStorage.token = user.get(1).token;
                self.set_before_ajax();
                $(".popup").html("");
                return self.render_main_menu();
              } else {
                $(self.el).find(".js-status").show().html("Invalid email or password.");
                return self.show_errors();
              }
            }
          });
        } else {
          $(self.el).find(".js-login-email").addClass("error");
          return $(self.el).find(".js-status").show().html("Invalid email address.");
        }
      } else {
        self.show_errors();
        return $(self.el).find(".js-status").show().html("Fill all required fields.");
      }
    };

    LoginForm.prototype.cancel = function(e) {
      return $(".popup").html("");
    };

    LoginForm.prototype.show_errors = function() {
      $(this.el).find(".js-login-email").addClass("error");
      return $(this.el).find(".js-login-password").addClass("error");
    };

    return LoginForm;

  })(Backbone.View);

  Video.MainMenu = (function(_super) {

    __extends(MainMenu, _super);

    function MainMenu() {
      return MainMenu.__super__.constructor.apply(this, arguments);
    }

    MainMenu.prototype.template = "#main_menu_tpl";

    MainMenu.prototype.initialize = function() {
      _.bindAll(this, "render");
      return _.extend(Video.MainMenu.prototype, Video.Utils);
    };

    MainMenu.prototype.events = {
      "click .js-login": "login",
      "click .js-logout": "logout",
      "click .js-register": "register",
      "click .js-upload": "upload"
    };

    MainMenu.prototype.render = function() {
      var container, template;
      container = $(this.el);
      template = _.template($(this.template).html());
      container.html(template);
      return this;
    };

    MainMenu.prototype.login = function(e) {
      this.login_form = new Video.LoginForm();
      $(".popup").html(this.login_form.render().el);
      return this.render_main_menu();
    };

    MainMenu.prototype.logout = function(e) {
      $.ajax(window.Video.root_path + "users/logout", this.render_main_menu());
      localStorage.removeItem("email");
      localStorage.removeItem("name");
      localStorage.removeItem("user_type");
      return localStorage.removeItem("token");
    };

    MainMenu.prototype.register = function(e) {
      this.register_form = new Video.RegisterForm();
      return $(".popup").html(this.register_form.render().el);
    };

    MainMenu.prototype.upload = function(e) {
      if (localStorage.email) {
        this.upload_form = new Video.UploadForm();
        return $(".popup").html(this.upload_form.render().el);
      } else {
        return this.handle_unauthorized();
      }
    };

    return MainMenu;

  })(Backbone.View);

  Video.MainVideo = (function(_super) {

    __extends(MainVideo, _super);

    function MainVideo() {
      return MainVideo.__super__.constructor.apply(this, arguments);
    }

    MainVideo.prototype.template = "#main_video_tpl";

    MainVideo.prototype.className = "video";

    MainVideo.prototype.initialize = function() {
      return _.bindAll(this, "render");
    };

    MainVideo.prototype.render = function() {
      var container, self, template, video;
      container = $(this.el);
      self = this;
      if (this.options.videos) {
        this.options.videos.each(function(video) {
          var template;
          template = _.template($(self.template).html(), {
            video: video
          });
          return container.html(template);
        });
      } else {
        video = new Video.VideoModel();
        video.set({
          title: "default title",
          video_file: "1.mp4",
          description: "desc"
        });
        template = _.template($(this.template).html(), {
          video: video
        });
        container.html(template);
      }
      return this;
    };

    return MainVideo;

  })(Backbone.View);

  Video.MyVideo = (function(_super) {

    __extends(MyVideo, _super);

    function MyVideo() {
      return MyVideo.__super__.constructor.apply(this, arguments);
    }

    MyVideo.prototype.template = "#video_tpl";

    MyVideo.prototype.className = "my-video";

    MyVideo.prototype.initialize = function() {
      return _.bindAll(this, "render");
    };

    MyVideo.prototype.render = function() {
      var container, template, video;
      container = $(this.el);
      video = this.options.video;
      template = _.template($(this.template).html(), {
        video: video
      });
      container.html(template);
      return this;
    };

    return MyVideo;

  })(Backbone.View);

  Video.MyVideos = (function(_super) {

    __extends(MyVideos, _super);

    function MyVideos() {
      return MyVideos.__super__.constructor.apply(this, arguments);
    }

    MyVideos.prototype.template = "#videos_tpl";

    MyVideos.prototype.className = "my-videos-list";

    MyVideos.prototype.initialize = function() {
      return _.bindAll(this, "render");
    };

    MyVideos.prototype.render = function() {
      var container, template;
      container = $(this.el);
      template = _.template($(this.template).html());
      container.html(template);
      this.collection.each(function(item) {
        var view;
        view = new Video.MyVideo({
          video: item
        });
        return $(container).append(view.render().el);
      });
      return this;
    };

    return MyVideos;

  })(Backbone.View);

  Video.RegisterForm = (function(_super) {

    __extends(RegisterForm, _super);

    function RegisterForm() {
      return RegisterForm.__super__.constructor.apply(this, arguments);
    }

    RegisterForm.prototype.template = "#register_form_tpl";

    RegisterForm.prototype.className = "register-form";

    RegisterForm.prototype.initialize = function() {
      _.bindAll(this, "render");
      return _.extend(Video.RegisterForm.prototype, Video.Utils);
    };

    RegisterForm.prototype.events = {
      "click .js-register-submit": "register",
      "click .js-register-cancel": "cancel"
    };

    RegisterForm.prototype.render = function() {
      var container, template;
      container = $(this.el);
      template = _.template($(this.template).html());
      container.html(template);
      return this;
    };

    RegisterForm.prototype.register = function(e) {
      var confirm_password, email, password, self, user;
      self = this;
      email = $(this.el).find(".js-register-email").val();
      password = $(this.el).find(".js-register-password").val();
      confirm_password = $(this.el).find(".js-register-confirm-password").val();
      if (email !== "" && password !== "" && confirm_password !== "") {
        if (password === confirm_password) {
          if (self.validate_email(email)) {
            user = new Video.UserModel();
            user.url = window.Video.root_path + "users/register";
            return user.fetch({
              data: {
                email: email,
                password: password
              },
              async: false,
              type: 'POST',
              contentType: "application/x-www-form-urlencoded",
              success: function() {
                if (user.get(0)) {
                  this.login_form = new Video.LoginForm();
                  return $(".popup").html(this.login_form.render().el);
                }
              }
            });
          } else {
            $(this.el).find(".js-register-email").addClass("error");
            return $(self.el).find(".js-status").show().html("Invalid email address.");
          }
        } else {
          self.show_errors();
          return $(self.el).find(".js-status").show().html("Passwords do not match");
        }
      } else {
        $(self.el).find(".js-status").show().html("Fill all required fields.");
        return self.show_errors();
      }
    };

    RegisterForm.prototype.cancel = function(e) {
      return $(".popup").html("");
    };

    RegisterForm.prototype.show_errors = function() {
      $(this.el).find(".js-register-email").addClass("error");
      $(this.el).find(".js-register-password").addClass("error");
      return $(this.el).find(".js-register-confirm-password").addClass("error");
    };

    return RegisterForm;

  })(Backbone.View);

  Video.UploadForm = (function(_super) {

    __extends(UploadForm, _super);

    function UploadForm() {
      return UploadForm.__super__.constructor.apply(this, arguments);
    }

    UploadForm.prototype.template = "#upload_form_tpl";

    UploadForm.prototype.className = "upload-form";

    UploadForm.prototype.initialize = function() {
      _.extend(Video.UploadForm.prototype, Video.Utils);
      return _.bindAll(this, "render");
    };

    UploadForm.prototype.events = {
      "click .js-upload-cancel": "cancel",
      "click .js-upload-save": "save"
    };

    UploadForm.prototype.render = function() {
      var container, self, template;
      self = this;
      self.id = 0;
      container = $(this.el);
      template = _.template($(this.template).html());
      container.html(template);
      console.log("test");
      $(this.el).find('.js-upload-form').fileupload({
        add: function(e, data) {
          console.log("add");
          data.form.context.action = window.Video.root_path + "videos/create";
          console.log(data);
          data.submit();
          container.find(".js-status").show().html("Starting upload.");
          container.find(".js-upload-save").show();
          return container.find(".video-metadata").show();
        },
        progress: function(e, data) {
          container.find(".js-status").show().html("Uploading...");
          return console.log('progress');
        },
        fail: function(e, data) {
          console.log('fail');
          container.find(".js-upload-save").hide();
          container.find(".js-status").show().html("Error.");
          container.find(".video-metadata").hide();
          if (data.jqXHR.status === 401) {
            return self.handle_unauthorized();
          }
        },
        done: function(e, data) {
          console.log(data.result);
          self.id = data.result[0].id;
          console.log(self.id);
          container.find(".js-status").show().html("Upload successful. <br />Video will be active after transcoding.");
          container.find(".js-upload-save").show();
          return container.find(".video-metadata").show();
        }
      });
      return this;
    };

    UploadForm.prototype.cancel = function(e) {
      var self;
      console.log("cancel");
      self = this;
      e.preventDefault();
      return $(".popup").html("");
    };

    UploadForm.prototype.save = function(e) {
      var description, self, title, video;
      console.log("save");
      e.preventDefault();
      self = this;
      title = $(self.el).find(".js-video-title").val();
      description = $(self.el).find(".js-video-description").val();
      if (title !== "") {
        video = new Video.VideoModel();
        video.url = window.Video.root_path + "videos/" + self.id;
        video.set({
          id: self.id,
          title: title,
          description: description
        });
        return video.save(null, {
          success: function(res) {
            if (res.changed[0].confirmed === "1") {
              window.location = "#videos/view/" + video.id;
            }
            return $(".popup").html("");
          }
        });
      } else {
        return $(self.el).find(".js-video-title").addClass("error");
      }
    };

    return UploadForm;

  })(Backbone.View);

}).call(this);
