// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Video = {
    initialize: function() {
      console.log("Video app initialized");
      window.video_router = new Video.VideoRouter();
      window.Video.root_path = "http://localhost:8080/restapi/api/";
      Backbone.history.start();
      return console.log("asdsd1sssdasdst");
    }
  };

  Video.Utils = {
    render_main_menu: function() {
      this.main_menu = new Video.MainMenu();
      return $(".main-menu-container").html(this.main_menu.render().el);
    },
    validate_email: function(email) {
      var pattern;
      pattern = new RegExp(/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i);
      return pattern.test(email);
    },
    render_featured_videos: function() {
      var i, _i, _results;
      $(".featured-container").html("");
      _results = [];
      for (i = _i = 0; _i <= 3; i = ++_i) {
        this.featured_video = new Video.FeaturedVideo();
        _results.push($(".featured-container").append(this.featured_video.render().el));
      }
      return _results;
    },
    render_defaults: function() {
      this.render_main_menu();
      this.render_featured_videos();
      this.main_video = new Video.MainVideo();
      return $(".video-container").html(this.main_video.render().el);
    }
  };

  Video.VideoRouter = (function(_super) {

    __extends(VideoRouter, _super);

    function VideoRouter() {
      return VideoRouter.__super__.constructor.apply(this, arguments);
    }

    VideoRouter.prototype.routes = {
      "": "index",
      "home": "index",
      "videos": "my_videos",
      "videos/view/:id": "view"
    };

    VideoRouter.prototype.initialize = function() {
      _.extend(Video.VideoRouter.prototype, Video.Utils);
      return console.log("Video router initialized");
    };

    VideoRouter.prototype.index = function() {
      return this.render_defaults();
    };

    VideoRouter.prototype.my_videos = function() {
      var _this = this;
      console.log("my videos");
      this.render_main_menu();
      this.render_featured_videos();
      this.videos = new Video.Videos();
      this.videos.url = window.Video.root_path + "videos/index?token=" + localStorage.token;
      return this.videos.fetch({
        success: function() {
          _this.my_videos_view = new Video.MyVideos({
            collection: _this.videos
          });
          return $(".video-container").html(_this.my_videos_view.render().el);
        }
      });
    };

    VideoRouter.prototype.view = function(id) {
      var videos;
      this.render_main_menu();
      this.render_featured_videos();
      videos = new Video.Videos();
      videos.url = window.Video.root_path + "videos/view/" + id;
      return videos.fetch({
        success: function() {
          this.main_video = new Video.MainVideo({
            videos: videos
          });
          return $(".video-container").html(this.main_video.render().el);
        }
      });
    };

    return VideoRouter;

  })(Backbone.Router);

  Video.UserModel = (function(_super) {

    __extends(UserModel, _super);

    function UserModel() {
      return UserModel.__super__.constructor.apply(this, arguments);
    }

    UserModel.prototype.urlRoot = window.Video.root_path + "users/";

    UserModel.prototype.initialize = function(options) {
      return this.options = options;
    };

    return UserModel;

  })(Backbone.Model);

  Video.VideoModel = (function(_super) {

    __extends(VideoModel, _super);

    function VideoModel() {
      return VideoModel.__super__.constructor.apply(this, arguments);
    }

    VideoModel.prototype.urlRoot = window.Video.root_path + "videos/";

    VideoModel.prototype.initialize = function(options) {
      return this.options = options;
    };

    return VideoModel;

  })(Backbone.Model);

  Video.Users = (function(_super) {

    __extends(Users, _super);

    function Users() {
      return Users.__super__.constructor.apply(this, arguments);
    }

    Users.prototype.model = Video.UserModel;

    Users.prototype.url = window.Video.root_path + "users";

    return Users;

  })(Backbone.Collection);

  Video.Videos = (function(_super) {

    __extends(Videos, _super);

    function Videos() {
      return Videos.__super__.constructor.apply(this, arguments);
    }

    Videos.prototype.model = Video.VideoModel;

    Videos.prototype.url = window.Video.root_path + "videos/index";

    return Videos;

  })(Backbone.Collection);

  Video.FeaturedVideo = (function(_super) {

    __extends(FeaturedVideo, _super);

    function FeaturedVideo() {
      return FeaturedVideo.__super__.constructor.apply(this, arguments);
    }

    FeaturedVideo.prototype.template = "#featured_video_tpl";

    FeaturedVideo.prototype.className = "featured-video";

    FeaturedVideo.prototype.initialize = function() {
      return _.bindAll(this, "render");
    };

    FeaturedVideo.prototype.render = function() {
      var container, template;
      container = $(this.el);
      template = _.template($(this.template).html(), {
        test: "test123"
      });
      container.html(template);
      return this;
    };

    return FeaturedVideo;

  })(Backbone.View);

  Video.LoginForm = (function(_super) {

    __extends(LoginForm, _super);

    function LoginForm() {
      return LoginForm.__super__.constructor.apply(this, arguments);
    }

    LoginForm.prototype.template = "#login_form_tpl";

    LoginForm.prototype.className = "login-form";

    LoginForm.prototype.initialize = function() {
      _.bindAll(this, "render");
      return _.extend(Video.LoginForm.prototype, Video.Utils);
    };

    LoginForm.prototype.events = {
      "click .js-login-submit": "login",
      "click .js-login-cancel": "cancel",
      "keypress .js-login-password": "enter_password_login"
    };

    LoginForm.prototype.render = function() {
      var container, template;
      container = $(this.el);
      template = _.template($(this.template).html());
      container.html(template);
      return this;
    };

    LoginForm.prototype.enter_password_login = function(e) {
      console.log("enter_password_login");
      if (e.charCode === 13) {
        return this.login(e);
      }
    };

    LoginForm.prototype.login = function(e) {
      var email, password, self, user;
      self = this;
      email = $(this.el).find(".js-login-email").val();
      password = $(this.el).find(".js-login-password").val();
      if (email !== "" && password !== "") {
        if (self.validate_email(email)) {
          user = new Video.UserModel();
          user.url = window.Video.root_path + "users/login";
          return user.fetch({
            crossDomain: true,
            data: {
              email: email,
              password: password
            },
            type: 'POST',
            contentType: "application/x-www-form-urlencoded",
            success: function() {
              if (user.get(0) && user.get(1)) {
                localStorage.token = user.get(1).token;
                $(".popup").html("");
                return self.render_main_menu();
              } else {
                $(self.el).find(".js-status").html("Invalid email or password.");
                return self.show_errors();
              }
            }
          });
        } else {
          $(self.el).find(".js-login-email").addClass("error");
          return $(self.el).find(".js-status").html("Invalid email address.");
        }
      } else {
        self.show_errors();
        return $(self.el).find(".js-status").html("Fill all required fields.");
      }
    };

    LoginForm.prototype.cancel = function(e) {
      return $(".popup").html("");
    };

    LoginForm.prototype.show_errors = function() {
      $(this.el).find(".js-login-email").addClass("error");
      return $(this.el).find(".js-login-password").addClass("error");
    };

    return LoginForm;

  })(Backbone.View);

  Video.MainMenu = (function(_super) {

    __extends(MainMenu, _super);

    function MainMenu() {
      return MainMenu.__super__.constructor.apply(this, arguments);
    }

    MainMenu.prototype.template = "#main_menu_tpl";

    MainMenu.prototype.className = "main-menu";

    MainMenu.prototype.initialize = function() {
      _.bindAll(this, "render");
      return _.extend(Video.MainMenu.prototype, Video.Utils);
    };

    MainMenu.prototype.events = {
      "click .js-login": "login",
      "click .js-logout": "logout",
      "click .js-register": "register",
      "click .js-upload": "upload"
    };

    MainMenu.prototype.render = function() {
      var container, template;
      container = $(this.el);
      template = _.template($(this.template).html());
      container.html(template);
      return this;
    };

    MainMenu.prototype.login = function(e) {
      this.login_form = new Video.LoginForm();
      $(".popup").html(this.login_form.render().el);
      return this.render_main_menu();
    };

    MainMenu.prototype.logout = function(e) {
      localStorage.removeItem("token");
      return this.render_main_menu();
    };

    MainMenu.prototype.register = function(e) {
      this.register_form = new Video.RegisterForm();
      return $(".popup").html(this.register_form.render().el);
    };

    MainMenu.prototype.upload = function(e) {
      this.upload_form = new Video.UploadForm();
      return $(".popup").html(this.upload_form.render().el);
    };

    return MainMenu;

  })(Backbone.View);

  Video.MainVideo = (function(_super) {

    __extends(MainVideo, _super);

    function MainVideo() {
      return MainVideo.__super__.constructor.apply(this, arguments);
    }

    MainVideo.prototype.template = "#video_tpl";

    MainVideo.prototype.className = "video";

    MainVideo.prototype.initialize = function() {
      return _.bindAll(this, "render");
    };

    MainVideo.prototype.render = function() {
      var container, self, template, video;
      container = $(this.el);
      self = this;
      if (this.options.videos) {
        this.options.videos.each(function(video) {
          var template;
          template = _.template($(self.template).html(), {
            video: video
          });
          return container.html(template);
        });
      } else {
        video = new Video.VideoModel();
        video.set({
          title: "default title",
          video_file: "1.mp4",
          description: "desc"
        });
        template = _.template($(this.template).html(), {
          video: video
        });
        container.html(template);
      }
      return this;
    };

    return MainVideo;

  })(Backbone.View);

  Video.MyVideos = (function(_super) {

    __extends(MyVideos, _super);

    function MyVideos() {
      return MyVideos.__super__.constructor.apply(this, arguments);
    }

    MyVideos.prototype.template = "#videos_tpl";

    MyVideos.prototype.className = "my-videos-list";

    MyVideos.prototype.initialize = function() {
      return _.bindAll(this, "render");
    };

    MyVideos.prototype.render = function() {
      var container, self;
      container = $(this.el);
      self = this;
      this.collection.each(function(item) {
        var template;
        template = _.template($(self.template).html(), {
          video: item
        });
        return $(container).append(template);
      });
      return this;
    };

    return MyVideos;

  })(Backbone.View);

  Video.RegisterForm = (function(_super) {

    __extends(RegisterForm, _super);

    function RegisterForm() {
      return RegisterForm.__super__.constructor.apply(this, arguments);
    }

    RegisterForm.prototype.template = "#register_form_tpl";

    RegisterForm.prototype.className = "register-form";

    RegisterForm.prototype.initialize = function() {
      _.bindAll(this, "render");
      return _.extend(Video.RegisterForm.prototype, Video.Utils);
    };

    RegisterForm.prototype.events = {
      "click .js-register-submit": "register",
      "click .js-register-cancel": "cancel"
    };

    RegisterForm.prototype.render = function() {
      var container, template;
      container = $(this.el);
      template = _.template($(this.template).html());
      container.html(template);
      return this;
    };

    RegisterForm.prototype.register = function(e) {
      var confirm_password, email, password, self, user;
      self = this;
      email = $(this.el).find(".js-register-email").val();
      password = $(this.el).find(".js-register-password").val();
      confirm_password = $(this.el).find(".js-register-confirm-password").val();
      if (email !== "" && password !== "" && confirm_password !== "") {
        if (password === confirm_password) {
          if (self.validate_email(email)) {
            user = new Video.UserModel();
            user.url = window.Video.root_path + "users/register";
            return user.fetch({
              data: {
                email: email,
                password: password
              },
              async: false,
              type: 'POST',
              contentType: "application/x-www-form-urlencoded",
              success: function() {
                if (user.get(0)) {
                  this.login_form = new Video.LoginForm();
                  return $(".popup").html(this.login_form.render().el);
                }
              }
            });
          } else {
            $(this.el).find(".js-register-email").addClass("error");
            return $(self.el).find(".js-status").html("Invalid email address.");
          }
        } else {
          self.show_errors();
          return $(self.el).find(".js-status").html("Passwords do not match");
        }
      } else {
        $(self.el).find(".js-status").html("Fill all required fields.");
        return self.show_errors();
      }
    };

    RegisterForm.prototype.cancel = function(e) {
      return $(".popup").html("");
    };

    RegisterForm.prototype.show_errors = function() {
      $(this.el).find(".js-register-email").addClass("error");
      $(this.el).find(".js-register-password").addClass("error");
      return $(this.el).find(".js-register-confirm-password").addClass("error");
    };

    return RegisterForm;

  })(Backbone.View);

  Video.UploadForm = (function(_super) {

    __extends(UploadForm, _super);

    function UploadForm() {
      return UploadForm.__super__.constructor.apply(this, arguments);
    }

    UploadForm.prototype.template = "#upload_form_tpl";

    UploadForm.prototype.className = "upload-form";

    UploadForm.prototype.initialize = function() {
      return _.bindAll(this, "render");
    };

    UploadForm.prototype.events = {
      "click .js-upload-cancel": "cancel"
    };

    UploadForm.prototype.render = function() {
      var container, template;
      container = $(this.el);
      template = _.template($(this.template).html());
      container.html(template);
      console.log("test");
      $(this.el).find('.js-upload-form').fileupload({
        add: function(e, data) {
          console.log("add");
          data.form.context.action = window.Video.root_path + "videos/create?token=" + localStorage.token;
          console.log(data);
          return data.submit();
        },
        progress: function(e, data) {
          return console.log('progress');
        },
        fail: function(e, data) {
          return console.log('fail');
        },
        done: function(e, data) {
          return console.log(data.result);
        }
      });
      return this;
    };

    UploadForm.prototype.cancel = function(e) {
      return $(".popup").html("");
    };

    return UploadForm;

  })(Backbone.View);

}).call(this);
